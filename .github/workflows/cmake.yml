name: CMake

# This is derived from the standard CMake template for github actions.
# For more details on the settings used, have a look at the template in the marketplace

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Fetch submodules windows
      # Recursively checkout submodules
      # TODO Violin use shallow clone to save resources
      run: |
        git submodule update --depth 1 --init --recursive
      if: ${{ matrix.os == 'windows-latest' }}

    - name: Fetch submodules linux
      # Recursively checkout submodules
      # TODO Violin use ssh and shallow clone to save resources
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --depth 1 --init --recursive
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (Windows)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Build only a minimal (client-only) version on Windows to save resources
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -Dramses-sdk_BUILD_EXAMPLES=OFF \
            -Dramses-sdk_BUILD_TOOLS=OFF \
            -Dramses-sdk_BUILD_SMOKE_TESTS=OFF \
            -Dramses-sdk_BUILD_DEMOS=OFF \
            -Dramses-sdk_BUILD_CLIENT_ONLY_SHARED_LIB=ON \
            -Dramses-sdk_BUILD_FULL_SHARED_LIB=OFF
      if: ${{ matrix.os == 'windows-latest' }}

    - name: Configure CMake (Linux)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
            -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchain/Linux_X86_64_llvm.toolchain \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

